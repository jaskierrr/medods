// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	models "main/internal/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	v5 "github.com/jackc/pgx/v5"
)

// MockRepositoryToken is a mock of RepositoryToken interface.
type MockRepositoryToken struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryTokenMockRecorder
}

// MockRepositoryTokenMockRecorder is the mock recorder for MockRepositoryToken.
type MockRepositoryTokenMockRecorder struct {
	mock *MockRepositoryToken
}

// NewMockRepositoryToken creates a new mock instance.
func NewMockRepositoryToken(ctrl *gomock.Controller) *MockRepositoryToken {
	mock := &MockRepositoryToken{ctrl: ctrl}
	mock.recorder = &MockRepositoryTokenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryToken) EXPECT() *MockRepositoryTokenMockRecorder {
	return m.recorder
}

// DeleteToken mocks base method.
func (m *MockRepositoryToken) DeleteToken(ctx context.Context, tx v5.Tx, userID, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteToken", ctx, tx, userID, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteToken indicates an expected call of DeleteToken.
func (mr *MockRepositoryTokenMockRecorder) DeleteToken(ctx, tx, userID, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteToken", reflect.TypeOf((*MockRepositoryToken)(nil).DeleteToken), ctx, tx, userID, token)
}

// InsertNewToken mocks base method.
func (m *MockRepositoryToken) InsertNewToken(ctx context.Context, user models.User, tx v5.Tx, refreshToken string, refreshTokenDuration time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewToken", ctx, user, tx, refreshToken, refreshTokenDuration)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertNewToken indicates an expected call of InsertNewToken.
func (mr *MockRepositoryTokenMockRecorder) InsertNewToken(ctx, user, tx, refreshToken, refreshTokenDuration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewToken", reflect.TypeOf((*MockRepositoryToken)(nil).InsertNewToken), ctx, user, tx, refreshToken, refreshTokenDuration)
}

// Login mocks base method.
func (m *MockRepositoryToken) Login(ctx context.Context, user models.User, refreshToken string, refreshTokenDuration time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, user, refreshToken, refreshTokenDuration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockRepositoryTokenMockRecorder) Login(ctx, user, refreshToken, refreshTokenDuration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockRepositoryToken)(nil).Login), ctx, user, refreshToken, refreshTokenDuration)
}

// SelectToken mocks base method.
func (m *MockRepositoryToken) SelectToken(ctx context.Context, userID, token string) (*models.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectToken", ctx, userID, token)
	ret0, _ := ret[0].(*models.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectToken indicates an expected call of SelectToken.
func (mr *MockRepositoryTokenMockRecorder) SelectToken(ctx, userID, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectToken", reflect.TypeOf((*MockRepositoryToken)(nil).SelectToken), ctx, userID, token)
}

// StartTx mocks base method.
func (m *MockRepositoryToken) StartTx(ctx context.Context) (v5.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTx", ctx)
	ret0, _ := ret[0].(v5.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTx indicates an expected call of StartTx.
func (mr *MockRepositoryTokenMockRecorder) StartTx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTx", reflect.TypeOf((*MockRepositoryToken)(nil).StartTx), ctx)
}
