// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryEmail is a mock of RepositoryEmail interface.
type MockRepositoryEmail struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryEmailMockRecorder
}

// MockRepositoryEmailMockRecorder is the mock recorder for MockRepositoryEmail.
type MockRepositoryEmailMockRecorder struct {
	mock *MockRepositoryEmail
}

// NewMockRepositoryEmail creates a new mock instance.
func NewMockRepositoryEmail(ctrl *gomock.Controller) *MockRepositoryEmail {
	mock := &MockRepositoryEmail{ctrl: ctrl}
	mock.recorder = &MockRepositoryEmailMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryEmail) EXPECT() *MockRepositoryEmailMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockRepositoryEmail) Send(ip string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockRepositoryEmailMockRecorder) Send(ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockRepositoryEmail)(nil).Send), ip)
}
